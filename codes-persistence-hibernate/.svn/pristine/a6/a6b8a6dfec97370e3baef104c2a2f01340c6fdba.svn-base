package com.codes.persistence.hibernate.test;

import java.util.Arrays;
import java.util.List;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.codes.common.util.Datas;
import com.codes.common.util.Pinyins;
import com.google.common.collect.Lists;

public class PersonDaoTest {
	PersonDao personDao = new PersonDao();
	
	@Before
	public void before(){
		personDao.setSessionFactory(HibernateUtil.getSessionFactory());
		personDao.getSessionFactory().getCurrentSession().beginTransaction();
	}
	
	@After
	public void after(){
		personDao.getSessionFactory().getCurrentSession().getTransaction().commit();
	}
	
	@Test
	public void testSave(){
		Person entity = new Person();
		entity.setFirstname("asdf");
		personDao.save(entity);
	}
	
	@Test
	public void testDelete(){
		personDao.delete("4a4ccbe650a976890150a9768e8400c5");
	}
	
	@Test
	public void testBatchSave(){
		List<Person> list = Lists.newArrayList();
		for (int i = 1; i <= 5000; i++) {
			Person person = new Person();
			
			person.setAge( Datas.getAge() );
			person.setSex( Datas.getSex() );
			person.setPhone( Datas.getPhone() );
			person.setEmail( Datas.getEmail() );
			String name = Datas.getWuxiaName();
			String firstname = name.substring(0, 1);
			String lastname = name.substring(1);
			if( name.length() > 3 ){
				firstname = name.substring(0, 2);
				lastname = name.substring(2);
			}
			
			person.setFirstname( firstname );
			person.setLastname( lastname );
			person.setNickname( Pinyins.getPinyin(name) );
			person.setQq( Datas.getQq() );
			person.setJob( Datas.getJob() );
			
			list.add(person);
		}
		
		personDao.save(list);
	}
	
	@Test
	public void testFindAll(){
		List<String> list = Arrays.asList( "4a4ccbe650a976890150a9768ee800fb", "4a4ccbe650a976890150a9768ee800fc" );
		Iterable<Person> ret = personDao.findAll(list);
		Assert.assertEquals(Lists.newArrayList(ret).size(), 2);
	}
	
	@Test
	public void testExists(){
		boolean exists = personDao.exists( "4a4ccbe650a976890150a9768ee800fb" );
		Assert.assertTrue(exists);
	}
	
	
}
